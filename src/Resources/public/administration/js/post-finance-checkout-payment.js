(function(){var e={544:function(){},166:function(){},360:function(){Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"postfinancecheckout",key:"postfinancecheckout",roles:{viewer:{privileges:["sales_channel:read","sales_channel_payment_method:read","system_config:read"],dependencies:[]},editor:{privileges:["sales_channel:update","sales_channel_payment_method:create","sales_channel_payment_method:update","system_config:update","system_config:create","system_config:delete"],dependencies:["postfinancecheckout.viewer"]}}}),Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:null,key:"sales_channel",roles:{viewer:{privileges:["sales_channel_payment_method:read"]},editor:{privileges:["payment_method:update"]},creator:{privileges:["payment_method:create","shipping_method:create","delivery_time:create"]},deleter:{privileges:["payment_method:delete"]}}})},62:function(e,t,n){var a=n(544);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("40f59bd0",a,!0,{})},880:function(e,t,n){var a=n(166);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("6b556694",a,!0,{})},346:function(e,t,n){"use strict";function a(e,t){for(var n=[],a={},i=0;i<t.length;i++){var o=t[i],s=o[0],c={id:e+":"+i,css:o[1],media:o[2],sourceMap:o[3]};a[s]?a[s].parts.push(c):n.push(a[s]={id:s,parts:[c]})}return n}n.d(t,{Z:function(){return m}});var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var o={},s=i&&(document.head||document.getElementsByTagName("head")[0]),c=null,r=0,l=!1,d=function(){},u=null,h="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function m(e,t,n,i){l=n,u=i||{};var s=a(e,t);return f(s),function(t){for(var n=[],i=0;i<s.length;i++){var c=o[s[i].id];c.refs--,n.push(c)}t?f(s=a(e,t)):s=[];for(var i=0;i<n.length;i++){var c=n[i];if(0===c.refs){for(var r=0;r<c.parts.length;r++)c.parts[r]();delete o[c.id]}}}}function f(e){for(var t=0;t<e.length;t++){var n=e[t],a=o[n.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](n.parts[i]);for(;i<n.parts.length;i++)a.parts.push(_(n.parts[i]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{for(var s=[],i=0;i<n.parts.length;i++)s.push(_(n.parts[i]));o[n.id]={id:n.id,refs:1,parts:s}}}}function g(){var e=document.createElement("style");return e.type="text/css",s.appendChild(e),e}function _(e){var t,n,a=document.querySelector("style["+h+'~="'+e.id+'"]');if(a){if(l)return d;a.parentNode.removeChild(a)}if(p){var i=r++;t=I.bind(null,a=c||(c=g()),i,!1),n=I.bind(null,a,i,!0)}else t=C.bind(null,a=g()),n=function(){a.parentNode.removeChild(a)};return t(e),function(a){a?(a.css!==e.css||a.media!==e.media||a.sourceMap!==e.sourceMap)&&t(e=a):n()}}var k=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function I(e,t,n,a){var i=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=k(t,i);else{var o=document.createTextNode(i),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(o,s[t]):e.appendChild(o)}}function C(e,t){var n=t.css,a=t.media,i=t.sourceMap;if(a&&e.setAttribute("media",a),u.ssrId&&e.setAttribute(h,t.id),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var o=t[a]={id:a,exports:{}};return e[a](o,o.exports,n),o.exports}n.d=function(e,t){for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="bundles/postfinancecheckoutpayment/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/postfinancecheckoutpayment/"),function(){"use strict";n(62);let{Component:e,Context:t}=Shopware,a=Shopware.Data.Criteria;e.override("sw-order-detail",{template:'{% block sw_order_detail_content_tabs_general %}\n    {% parent %}\n\n<sw-tabs-item v-if="isPostFinanceCheckoutPayment"\n			  :route="{ name: \'postfinancecheckout.order.detail\', params: { id: $route.params.id } }"\n			  :title="$tc(\'postfinancecheckout-order.header\')">\n	{{ $tc(\'postfinancecheckout-order.header\') }}\n</sw-tabs-item>\n{% endblock %}\n\n{% block sw_order_detail_actions_slot_smart_bar_actions %}\n<template v-if="isEditable">\n	{% parent %}\n</template>\n{% endblock %}\n',data(){return{isPostFinanceCheckoutPayment:!1}},computed:{isEditable(){return!this.isPostFinanceCheckoutPayment||"postfinancecheckout.order.detail"!==this.$route.name},showTabs(){return!0}},watch:{orderId:{deep:!0,handler(){if(!this.orderId){this.setIsPostFinanceCheckoutPayment(null);return}let e=this.repositoryFactory.create("order"),n=new a(1,1);n.addAssociation("transactions"),e.get(this.orderId,t.api,n).then(e=>{if(e.amountTotal<=0||e.transactions.length<=0||!e.transactions[0].paymentMethodId){this.setIsPostFinanceCheckoutPayment(null);return}let t=e.transactions[0].paymentMethodId;null!=t&&this.setIsPostFinanceCheckoutPayment(t)})},immediate:!0}},methods:{setIsPostFinanceCheckoutPayment(e){e&&this.repositoryFactory.create("payment_method").get(e,t.api).then(e=>{this.isPostFinanceCheckoutPayment="handler_postfinancecheckoutpayment_postfinancecheckoutpaymenthandler"===e.formattedHandlerIdentifier})}}});let{Component:i,Mixin:o,Filter:s,Utils:c}=Shopware;i.register("postfinancecheckout-order-action-completion",{template:'{% block postfinancecheckout_order_action_completion %}\n<sw-modal variant="small"\n		  :title="$tc(`postfinancecheckout-order.modal.title.capture`)"\n		  @modal-close="$emit(\'modal-close\')">\n\n	{% block postfinancecheckout_order_action_completion_amount %}\n		<sw-checkbox-field\n				:label="$tc(\'postfinancecheckout-order.captureAction.button.text\')"\n				v-model:value="isCompletion">\n        </sw-checkbox-field>\n	{% endblock %}\n\n	{% block postfinancecheckout_order_action_completion_confirm_button %}\n	<template #modal-footer>\n		<sw-button variant="primary"\n				   @click="completion">\n			{{ $tc(\'postfinancecheckout-order.refundAction.confirmButton.text\') }}\n		</sw-button>\n	</template>\n	{% endblock %}\n\n	<sw-loader v-if="isLoading"></sw-loader>\n</sw-modal>\n{% endblock %}\n',inject:["PostFinanceCheckoutTransactionCompletionService"],mixins:[o.getByName("notification")],props:{transactionData:{type:Object,required:!0}},data(){return{isLoading:!0,isCompletion:!1}},computed:{dateFilter(){return s.getByName("date")}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1},completion(){this.isCompletion&&(this.isLoading=!0,this.PostFinanceCheckoutTransactionCompletionService.createTransactionCompletion(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id).then(()=>{this.createNotificationSuccess({title:this.$tc("postfinancecheckout-order.captureAction.successTitle"),message:this.$tc("postfinancecheckout-order.captureAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${c.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch(t){this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${c.createId()}`)})}}))}}});let{Component:r,Mixin:l,Filter:d,Utils:u}=Shopware;r.register("postfinancecheckout-order-action-refund",{template:'{% block postfinancecheckout_order_action_refund %}\n<sw-modal variant="small"\n		  :title="$tc(`postfinancecheckout-order.modal.title.refund`)"\n		  @modal-close="$emit(\'modal-close\')">\n\n	{% block postfinancecheckout_order_action_refund_amount %}\n\n		<sw-number-field v-model="refundQuantity"\n						 :max="this.$parent.refundableQuantity"\n						 :min="1"\n						 :label="$tc(\'postfinancecheckout-order.refund.refundQuantity.label\')">\n		</sw-number-field>\n\n		<div>\n			{{ $tc(\'postfinancecheckout-order.refundAction.maxAvailableItemsToRefund\') }}:\n			<b>{{ this.$parent.refundableQuantity }}</b>\n		</div>\n	{% endblock %}\n\n	{% block postfinancecheckout_order_action_refund_confirm_button %}\n	<template #modal-footer>\n		<sw-button variant="primary" @click="refund()">\n			{{ $tc(\'postfinancecheckout-order.refundAction.confirmButton.text\') }}\n		</sw-button>\n	</template>\n	{% endblock %}\n\n	<sw-loader v-if="isLoading"></sw-loader>\n</sw-modal>\n{% endblock %}\n',inject:["PostFinanceCheckoutRefundService"],mixins:[l.getByName("notification")],props:{transactionData:{type:Object,required:!0},orderId:{type:String,required:!0}},data(){return{refundQuantity:1,transactionData:{},isLoading:!0,currentLineItem:""}},computed:{dateFilter(){return d.getByName("date")}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1},refund(){this.isLoading=!0,this.PostFinanceCheckoutRefundService.createRefund(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id,this.refundQuantity,this.$parent.currentLineItem).then(()=>{this.createNotificationSuccess({title:this.$tc("postfinancecheckout-order.refundAction.successTitle"),message:this.$tc("postfinancecheckout-order.refundAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${u.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch(t){this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${u.createId()}`)})}})}}});let{Component:h,Mixin:p,Filter:m,Utils:f}=Shopware;h.register("postfinancecheckout-order-action-refund-by-amount",{template:'{% block postfinancecheckout_order_action_refund_by_amount %}\n<sw-modal variant="small"\n		  :title="$tc(`postfinancecheckout-order.modal.title.refund`)"\n		  @modal-close="$emit(\'modal-close\')">\n\n	{% block postfinancecheckout_order_action_refund_amount_by_amount %}\n		<sw-number-field v-model="refundAmount"\n		 :max="refundableAmount"\n		 :min="0"\n		 v-model:value="refundAmount"\n		 :label="$tc(\'postfinancecheckout-order.refund.refundAmount.label\')"\n		 :suffix="currency">\n		</sw-number-field>\n	{% endblock %}\n\n	{% block postfinancecheckout_order_action_refund_confirm_button_by_amount %}\n	<template #modal-footer>\n		<sw-button variant="primary" @click="refundByAmount()">\n			{{ $tc(\'postfinancecheckout-order.refundAction.confirmButton.text\') }}\n		</sw-button>\n	</template>\n	{% endblock %}\n\n	<sw-loader v-if="isLoading"></sw-loader>\n</sw-modal>\n{% endblock %}\n',inject:["PostFinanceCheckoutRefundService"],mixins:[p.getByName("notification")],props:{transactionData:{type:Object,required:!0},orderId:{type:String,required:!0}},data(){return{isLoading:!0,currency:this.transactionData.transactions[0].currency,refundAmount:0,refundableAmount:0}},computed:{dateFilter(){return m.getByName("date")}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1,this.currency=this.transactionData.transactions[0].currency,this.refundAmount=Number(this.transactionData.transactions[0].amountIncludingTax),this.refundableAmount=Number(this.transactionData.transactions[0].amountIncludingTax)},refundByAmount(){this.isLoading=!0,this.PostFinanceCheckoutRefundService.createRefundByAmount(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id,this.refundAmount).then(()=>{this.createNotificationSuccess({title:this.$tc("postfinancecheckout-order.refundAction.successTitle"),message:this.$tc("postfinancecheckout-order.refundAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${f.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch(t){this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${f.createId()}`)})}})}}});let{Component:g,Mixin:_,Filter:k,Utils:I}=Shopware;g.register("postfinancecheckout-order-action-void",{template:'{% block postfinancecheckout_order_action_void %}\n<sw-modal variant="small"\n		  :title="$tc(`postfinancecheckout-order.modal.title.void`)"\n		  @modal-close="$emit(\'modal-close\')">\n\n	{% block postfinancecheckout_order_action_void_amount %}\n		<sw-checkbox-field\n				:label="$tc(\'postfinancecheckout-order.voidAction.confirm.message\')"\n				v-model:value="isVoid">\n        </sw-checkbox-field>\n	{% endblock %}\n\n	{% block postfinancecheckout_order_action_void_confirm_button %}\n	<template #modal-footer>\n		<sw-button variant="primary"\n				   @click="voidPayment">\n			{{ $tc(\'postfinancecheckout-order.refundAction.confirmButton.text\') }}\n		</sw-button>\n	</template>\n	{% endblock %}\n\n	<sw-loader v-if="isLoading"></sw-loader>\n</sw-modal>\n{% endblock %}\n',inject:["PostFinanceCheckoutTransactionVoidService"],mixins:[_.getByName("notification")],props:{transactionData:{type:Object,required:!0}},data(){return{isLoading:!0,isVoid:!1}},computed:{dateFilter(){return k.getByName("date")},lineItemColumns(){return[{property:"uniqueId",label:this.$tc("postfinancecheckout-order.refund.types.uniqueId"),rawData:!1,allowResize:!0,primary:!0,width:"auto"},{property:"name",label:this.$tc("postfinancecheckout-order.refund.types.name"),rawData:!0,allowResize:!0,sortable:!0,width:"auto"},{property:"quantity",label:this.$tc("postfinancecheckout-order.refund.types.quantity"),rawData:!0,allowResize:!0,width:"auto"},{property:"amountIncludingTax",label:this.$tc("postfinancecheckout-order.refund.types.amountIncludingTax"),rawData:!0,allowResize:!0,inlineEdit:"string",width:"auto"},{property:"type",label:this.$tc("postfinancecheckout-order.refund.types.type"),rawData:!0,allowResize:!0,sortable:!0,width:"auto"},{property:"taxAmount",label:this.$tc("postfinancecheckout-order.refund.types.taxAmount"),rawData:!0,allowResize:!0,width:"auto"}]}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1,this.currency=this.transactionData.transactions[0].currency,this.refundableAmount=this.transactionData.transactions[0].amountIncludingTax,this.refundAmount=this.transactionData.transactions[0].amountIncludingTax},voidPayment(){this.isVoid&&(this.isLoading=!0,this.PostFinanceCheckoutTransactionVoidService.createTransactionVoid(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id).then(()=>{this.createNotificationSuccess({title:this.$tc("postfinancecheckout-order.voidAction.successTitle"),message:this.$tc("postfinancecheckout-order.voidAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${I.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch(t){this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${I.createId()}`)})}}))}}}),n(880);let{Component:C,Mixin:b,Filter:y,Context:w,Utils:E}=Shopware,N=Shopware.Data.Criteria;C.register("postfinancecheckout-order-detail",{template:'{% block postfinancecheckout_order_detail %}\n<div class="postfinancecheckout-order-detail">\n	<div v-if="!isLoading">\n		<sw-card :title="$tc(\'postfinancecheckout-order.paymentDetails.cardTitle\')">\n			<template #grid>\n				{% block postfinancecheckout_order_actions_section %}\n				<sw-card-section secondary slim>\n					{% block postfinancecheckout_order_transaction_refunds_action_button %}\n						<sw-button\n								variant="primary"\n								size="small"\n								:disabled="transaction.state != \'FULFILL\' || refundableAmount <= 0"\n								@click="spawnModal(\'refundByAmount\')">\n							{{ $tc(\'postfinancecheckout-order.buttons.label.refund\') }}\n						</sw-button>\n					{% endblock %}\n					{% block postfinancecheckout_order_transaction_completion_action_button %}\n					<sw-button\n							variant="primary"\n							size="small"\n							:disabled="transaction.state != \'AUTHORIZED\' || isLoading"\n							@click="spawnModal(\'completion\')">\n						{{ $tc(\'postfinancecheckout-order.buttons.label.completion\') }}\n					</sw-button>\n					{% endblock %}\n					{% block postfinancecheckout_order_transaction_void_action_button %}\n					<sw-button\n							variant="primary"\n							size="small"\n							:disabled="transaction.state != \'AUTHORIZED\' || isLoading"\n							@click="spawnModal(\'void\')">\n						{{ $tc(\'postfinancecheckout-order.buttons.label.void\') }}\n					</sw-button>\n					{% endblock %}\n					{% block postfinancecheckout_order_transaction_download_invoice_action_button %}\n					<sw-button\n							variant="primary"\n							size="small"\n							:disabled="transaction.state != \'FULFILL\'"\n							@click="downloadInvoice()">\n						{{ $tc(\'postfinancecheckout-order.buttons.label.download-invoice\') }}\n					</sw-button>\n					{% endblock %}\n					{% block postfinancecheckout_order_transaction_download_packing_slip_action_button %}\n					<sw-button\n							variant="primary"\n							size="small"\n							:disabled="transaction.state != \'FULFILL\'"\n							@click="downloadPackingSlip()">\n						{{ $tc(\'postfinancecheckout-order.buttons.label.download-packing-slip\') }}\n					</sw-button>\n					{% endblock %}\n				</sw-card-section>\n				{% endblock %}\n			</template>\n		</sw-card>\n		{% block postfinancecheckout_order_transaction_history_card %}\n		<sw-card :title="$tc(\'postfinancecheckout-order.transactionHistory.cardTitle\')">\n			<template #grid>\n\n				{% block postfinancecheckout_order_transaction_history_grid %}\n				<sw-data-grid :dataSource="transactionData.transactions"\n							  :columns="relatedResourceColumns"\n							  :showActions="true"\n							  :showSelection="false">\n\n					<template #actions="{ item }">\n						<sw-context-menu-item v-if="item.customerId">{{ $tc(\'postfinancecheckout-order.transactionHistory.customerId\') }}: {{ item.customerId }}</sw-context-menu-item>\n						<sw-context-menu-item v-if="item.customerName">{{ $tc(\'postfinancecheckout-order.transactionHistory.customerName\') }}: {{ item.customerName }}</sw-context-menu-item>\n						<sw-context-menu-item v-if="item.creditCardHolder">{{ $tc(\'postfinancecheckout-order.transactionHistory.creditCardHolder\') }}: {{ item.creditCardHolder }}</sw-context-menu-item>\n						<sw-context-menu-item v-if="item.paymentMethodName">{{ $tc(\'postfinancecheckout-order.transactionHistory.paymentMethod\') }}: {{ item.paymentMethodName }}</sw-context-menu-item>\n						<sw-context-menu-item v-if="item.brandName">{{ $tc(\'postfinancecheckout-order.transactionHistory.paymentMethodBrand\') }}: {{ item.brandName }}</sw-context-menu-item>\n						<sw-context-menu-item v-if="item.pseudoCardNumber">{{ $tc(\'postfinancecheckout-order.transactionHistory.PseudoCreditCardNumber\') }}: {{ item.pseudoCardNumber }}</sw-context-menu-item>\n						<sw-context-menu-item v-if="item.pseudoCardNumber && item.cardExpireMonth && item.cardExpireYear">{{ $tc(\'postfinancecheckout-order.transactionHistory.CardExpire\') }}: {{ item.cardExpireMonth }} / {{ item.cardExpireYear }}</sw-context-menu-item>\n						<sw-context-menu-item v-if="item.payId">PayID: {{ item.payId }}</sw-context-menu-item>\n					</template>\n				</sw-data-grid>\n				{% endblock %}\n			</template>\n\n		</sw-card>\n		{% endblock %}\n		{% block postfinancecheckout_order_transaction_line_items_card %}\n		<sw-card :title="$tc(\'postfinancecheckout-order.lineItem.cardTitle\')">\n			<template #grid>\n\n				{% block postfinancecheckout_order_transaction_line_items_grid %}\n				<sw-data-grid\n						:dataSource="lineItems"\n						:columns="lineItemColumns"\n						:showActions="true"\n						:showSelection="false">\n\n					{% block postfinancecheckout_order_transaction_line_items_grid_grid_actions %}\n						<template #actions="{ item }">\n								<sw-context-menu-item\n									:disabled="transaction.state != \'FULFILL\' || item.refundableQuantity != item.quantity"\n								    icon="default-money-cash"\n								    @click="lineItemRefund(item.uniqueId)">\n									{{ $tc(\'postfinancecheckout-order.buttons.label.refund-whole-line-item\') }}\n								</sw-context-menu-item>\n\n								<sw-context-menu-item\n										:disabled="transaction.state != \'FULFILL\' || item.refundableQuantity == 0"\n										icon="default-money-cash"\n										@click="spawnModal(\'refund\', item.uniqueId, item.refundableQuantity)">\n									{{ $tc(\'postfinancecheckout-order.buttons.label.refund-line-item-by-quantity\') }}\n								</sw-context-menu-item>\n						</template>\n					{% endblock %}\n				</sw-data-grid>\n				{% endblock %}\n			</template>\n		</sw-card>\n		{% endblock %}\n		{% block postfinancecheckout_order_transaction_refunds_card %}\n		<sw-card :title="$tc(\'postfinancecheckout-order.refund.cardTitle\')" v-if="transactionData.refunds.length > 0">\n			<template #grid>\n\n				{% block postfinancecheckout_order_transaction_refunds_grid %}\n				<sw-data-grid\n						:dataSource="transactionData.refunds"\n						:columns="refundColumns"\n						:showActions="false"\n						:showSelection="false">\n				</sw-data-grid>\n				{% endblock %}\n			</template>\n\n		</sw-card>\n		{% endblock %}\n		{% block postfinancecheckout_order_actions_modal_refund %}\n		<postfinancecheckout-order-action-refund\n				v-if="modalType === \'refund\'"\n				:orderId="orderId"\n				:transactionData="transactionData"\n				:lineItems="lineItems"\n				@modal-close="closeModal">\n		</postfinancecheckout-order-action-refund>\n		{% endblock %}\n		{% block postfinancecheckout_order_actions_modal_refund_by_amount %}\n			<postfinancecheckout-order-action-refund-by-amount\n					v-if="modalType === \'refundByAmount\'"\n					:orderId="orderId"\n					:transactionData="transactionData"\n					:lineItems="lineItems"\n					@modal-close="closeModal">\n			</postfinancecheckout-order-action-refund-by-amount>\n		{% endblock %}\n		{% block postfinancecheckout_order_actions_modal_completion%}\n		<postfinancecheckout-order-action-completion\n				v-if="modalType === \'completion\'"\n				:orderId="orderId"\n				:transactionData="transactionData"\n				:lineItems="lineItems"\n				@modal-close="closeModal">\n		</postfinancecheckout-order-action-completion>\n		{% endblock %}\n		{% block postfinancecheckout_order_actions_modal_void %}\n		<postfinancecheckout-order-action-void\n				v-if="modalType === \'void\'"\n				:orderId="orderId"\n				:transactionData="transactionData"\n				:lineItems="lineItems"\n				@modal-close="closeModal">\n		</postfinancecheckout-order-action-void>\n		{% endblock %}\n	</div>\n	<sw-loader v-if="isLoading"></sw-loader>\n</div>\n{% endblock %}\n',inject:["PostFinanceCheckoutTransactionService","PostFinanceCheckoutRefundService","repositoryFactory"],mixins:[b.getByName("notification")],data(){return{transactionData:{transactions:[],refunds:[]},transaction:{},lineItems:[],refundableQuantity:0,isLoading:!0,orderId:"",currency:"",modalType:"",refundAmount:0,refundableAmount:0,currentLineItem:"",refundLineItem:[]}},metaInfo(){return{title:this.$tc("postfinancecheckout-order.header")}},computed:{dateFilter(){return y.getByName("date")},relatedResourceColumns(){return[{property:"paymentMethodName",label:this.$tc("postfinancecheckout-order.transactionHistory.types.payment_method"),rawData:!0},{property:"state",label:this.$tc("postfinancecheckout-order.transactionHistory.types.state"),rawData:!0},{property:"currency",label:this.$tc("postfinancecheckout-order.transactionHistory.types.currency"),rawData:!0},{property:"authorized_amount",label:this.$tc("postfinancecheckout-order.transactionHistory.types.authorized_amount"),rawData:!0},{property:"id",label:this.$tc("postfinancecheckout-order.transactionHistory.types.transaction"),rawData:!0},{property:"customerId",label:this.$tc("postfinancecheckout-order.transactionHistory.types.customer"),rawData:!0}]},lineItemColumns(){return[{property:"uniqueId",label:this.$tc("postfinancecheckout-order.lineItem.types.uniqueId"),rawData:!0,visible:!1,primary:!0},{property:"name",label:this.$tc("postfinancecheckout-order.lineItem.types.name"),rawData:!0},{property:"quantity",label:this.$tc("postfinancecheckout-order.lineItem.types.quantity"),rawData:!0},{property:"amountIncludingTax",label:this.$tc("postfinancecheckout-order.lineItem.types.amountIncludingTax"),rawData:!0},{property:"type",label:this.$tc("postfinancecheckout-order.lineItem.types.type"),rawData:!0},{property:"taxAmount",label:this.$tc("postfinancecheckout-order.lineItem.types.taxAmount"),rawData:!0},{property:"refundableQuantity",rawData:!0,visible:!1}]},refundColumns(){return[{property:"id",label:this.$tc("postfinancecheckout-order.refund.types.id"),rawData:!0,visible:!0,primary:!0},{property:"amount",label:this.$tc("postfinancecheckout-order.refund.types.amount"),rawData:!0},{property:"state",label:this.$tc("postfinancecheckout-order.refund.types.state"),rawData:!0},{property:"createdOn",label:this.$tc("postfinancecheckout-order.refund.types.createdOn"),rawData:!0}]}},watch:{$route(){this.resetDataAttributes(),this.createdComponent()}},created(){this.createdComponent()},methods:{createdComponent(){this.orderId=this.$route.params.id;let e=this.repositoryFactory.create("order"),t=new N(1,1);t.addAssociation("transactions"),t.getAssociation("transactions").addSorting(N.sort("createdAt","DESC")),e.get(this.orderId,w.api,t).then(e=>{this.order=e,this.isLoading=!1;var t=0,n=0;let a=e.transactions[0].customFields.postfinancecheckout_transaction_id;this.PostFinanceCheckoutTransactionService.getTransactionData(e.salesChannelId,a).then(e=>{this.currency=e.transactions[0].currency,e.transactions[0].authorized_amount=E.format.currency(e.transactions[0].authorizationAmount,this.currency),e.refunds.forEach(e=>{n=parseFloat(parseFloat(n)+parseFloat(e.amount)),e.amount=E.format.currency(e.amount,this.currency),e.reductions.forEach(e=>{void 0===this.refundLineItem[e.lineItemUniqueId]?this.refundLineItem[e.lineItemUniqueId]=e.quantityReduction:this.refundLineItem[e.lineItemUniqueId]+=e.quantityReduction})}),e.transactions[0].lineItems.forEach(e=>{e.amountIncludingTax=E.format.currency(e.amountIncludingTax,this.currency),e.taxAmount=E.format.currency(e.taxAmount,this.currency),t=parseFloat(parseFloat(t)+parseFloat(e.unitPriceIncludingTax*e.quantity)),e.refundableQuantity=parseInt(parseInt(e.quantity)-parseInt(this.refundLineItem[e.uniqueId]||0))}),this.lineItems=e.transactions[0].lineItems,this.transactionData=e,this.transaction=this.transactionData.transactions[0],this.refundAmount=Number(this.transactionData.transactions[0].amountIncludingTax),this.refundableAmount=parseFloat(parseFloat(t)-parseFloat(n))}).catch(e=>{try{this.createNotificationError({title:this.$tc("postfinancecheckout-order.paymentDetails.error.title"),message:e.message,autoClose:!1})}catch(t){this.createNotificationError({title:this.$tc("postfinancecheckout-order.paymentDetails.error.title"),message:e.message,autoClose:!1})}finally{this.isLoading=!1}})})},downloadPackingSlip(){window.open(this.PostFinanceCheckoutTransactionService.getPackingSlip(this.transaction.metaData.salesChannelId,this.transaction.id),"_blank")},downloadInvoice(){window.open(this.PostFinanceCheckoutTransactionService.getInvoiceDocument(this.transaction.metaData.salesChannelId,this.transaction.id),"_blank")},resetDataAttributes(){this.transactionData={transactions:[],refunds:[]},this.lineItems=[],this.refundLineItem=[],this.isLoading=!0},spawnModal(e,t,n){this.modalType=e,this.currentLineItem=t,this.refundableQuantity=n},closeModal(){this.modalType=""},lineItemRefund(e){this.isLoading=!0,this.PostFinanceCheckoutRefundService.createRefund(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id,0,e).then(()=>{this.createNotificationSuccess({title:this.$tc("postfinancecheckout-order.refundAction.successTitle"),message:this.$tc("postfinancecheckout-order.refundAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${E.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch(t){this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${E.createId()}`)})}})}}});var v=JSON.parse('{"postfinancecheckout-order":{"buttons":{"label":{"completion":"Abschluss","download-invoice":"Rechnung herunterladen","download-packing-slip":"Packzettel herunterladen","refund":"Eine neue R\xfcckerstattung erstellen","void":"Genehmigung annullieren","refund-whole-line-item":"Gesamte Werbebuchung erstatten","refund-line-item-by-quantity":"R\xfcckerstattung nach Menge"}},"captureAction":{"button":{"text":"Zahlung erfassen"},"currentAmount":"Betrag","isFinal":"Dies ist die endg\xfcltige Verbuchung","maxAmount":"Maximaler Betrag","successMessage":"Ihre Verbuchung war erfolgreich","successTitle":"Erfolg"},"general":{"title":"Bestellungen"},"header":"PostFinanceCheckout Payment","lineItem":{"cardTitle":"Einzelposten","types":{"amountIncludingTax":"Betrag","name":"Name","quantity":"Anzahl","taxAmount":"Steuern","type":"Typ","uniqueId":"Eindeutige ID"}},"modal":{"title":{"capture":"Erfassen","refund":"Neue Gutschrift","void":"Autorisierung aufheben"}},"paymentDetails":{"cardTitle":"Zahlung","error":{"title":"Fehler beim Abrufen von Zahlungsdetails von PostFinanceCheckout"}},"refund":{"cardTitle":"Gutschriften","refundAmount":{"label":"Gutschriftsbetrag"},"refundQuantity":{"label":"Refund Menge"},"types":{"amount":"Betrag","createdOn":"Erstellt am","id":"ID","state":"Staat"}},"refundAction":{"confirmButton":{"text":"Ausf\xfchren"},"refundAmount":{"label":"Betrag","placeholder":"Einen Betrag eingeben"},"successMessage":"Ihre R\xfcckerstattung war erfolgreich","successTitle":"Erfolg","maxAvailableItemsToRefund":"Maximal Verf\xfcgbare Artikel zum Erstatten"},"transactionHistory":{"cardTitle":"Einzelheiten","types":{"authorized_amount":"Autorisierter Betrag","currency":"W\xe4hrung","customer":"Kunde","payment_method":"Zahlungsweise","state":"Staat","transaction":"Transaktion"},"customerId":"Customer ID","customerName":"Customer Name","creditCardHolder":"Kreditkarteninhaber","paymentMethod":"Zahlungsart","paymentMethodBrand":"Marke der Zahlungsmethode","PseudoCreditCardNumber":"Pseudo-Kreditkartennummer","CardExpire":"Karte verf\xe4llt"},"voidAction":{"confirm":{"button":{"cancel":"Nein","confirm":"Autorisierung aufheben"},"message":"Wollen Sie diese Zahlung wirklich stornieren?"},"successMessage":"Die Zahlung wurde erfolgreich annulliert","successTitle":"Erfolg"}}}'),S=JSON.parse('{"postfinancecheckout-order":{"buttons":{"label":{"completion":"Complete","download-invoice":"Download Invoice","download-packing-slip":"Download Packing Slip","refund":"Create a new refund","void":"Cancel authorization","refund-whole-line-item":"Refund whole line item","refund-line-item-by-quantity":"Refund by quantity"}},"captureAction":{"button":{"text":"Capture payment"},"currentAmount":"Amount","isFinal":"This is final capture","maxAmount":"Maximum amount","successMessage":"Your capture was successful.","successTitle":"Success"},"general":{"title":"Orders"},"header":"PostFinanceCheckout Payment","lineItem":{"cardTitle":"Line Items","types":{"amountIncludingTax":"Amount","name":"Name","quantity":"Quantity","taxAmount":"Taxes","type":"Type","uniqueId":"Unique ID"}},"modal":{"title":{"capture":"Capture","refund":"New refund","void":"Cancel authorization"}},"paymentDetails":{"cardTitle":"Payment","error":{"title":"Error fetching payment details from PostFinanceCheckout"}},"refund":{"cardTitle":"Refunds","refundAmount":{"label":"Refund Amount"},"refundQuantity":{"label":"Refund Quantity"},"types":{"amount":"Amount","createdOn":"Created On","id":"ID","state":"State"}},"refundAction":{"confirmButton":{"text":"Execute"},"refundAmount":{"label":"Amount","placeholder":"Enter a amount"},"successMessage":"Your refund was successful.","successTitle":"Success","maxAvailableItemsToRefund":"Maximum available items to refund"},"transactionHistory":{"cardTitle":"Details","types":{"authorized_amount":"Authorized Amount","currency":"Currency","customer":"Customer","payment_method":"Payment Method","state":"State","transaction":"Transaction"},"customerId":"Customer ID","customerName":"Customer Name","creditCardHolder":"Credit Card Holder","paymentMethod":"Payment Method","paymentMethodBrand":"Payment Method Brand","PseudoCreditCardNumber":"Pseudo Credit Card Number","CardExpire":"Card Expire"},"voidAction":{"confirm":{"button":{"cancel":"No","confirm":"Cancel authorization"},"message":"Do you really want to cancel this payment?"},"successMessage":"The payment was successfully voided.","successTitle":"Success"}}}'),F=JSON.parse('{"postfinancecheckout-order":{"buttons":{"label":{"completion":"Termin\xe9e","download-invoice":"T\xe9l\xe9charger la facture","download-packing-slip":"T\xe9l\xe9charger le bordereau d\'exp\xe9dition","refund":"Cr\xe9er un nouveau remboursement","void":"Annulez l\'autorisation","refund-whole-line-item":"Remboursement de la ligne enti\xe8re","refund-line-item-by-quantity":"Remboursement par quantit\xe9"}},"captureAction":{"button":{"text":"Capture du paiement"},"currentAmount":"Montant","isFinal":"C\'est la capture finale","maxAmount":"Montant maximal","successMessage":"Votre capture a \xe9t\xe9 r\xe9ussie.","successTitle":"Succ\xe8s"},"general":{"title":"Commandes"},"header":"PostFinanceCheckout Paiement","lineItem":{"cardTitle":"Articles de ligne","types":{"amountIncludingTax":"Montant","name":"Nom","quantity":"Quantit\xe9","taxAmount":"Taxes","type":"Type","uniqueId":"ID unique"}},"modal":{"title":{"capture":"Capture","refund":"Nouveau remboursement","void":"Annulez l\'autorisation"}},"paymentDetails":{"cardTitle":"Paiement","error":{"title":"Erreur dans la r\xe9cup\xe9ration des d\xe9tails du paiement \xe0 partir de PostFinanceCheckout"}},"refund":{"cardTitle":"Remboursements","refundAmount":{"label":"Montant du remboursement"},"refundQuantity":{"label":"Quantit\xe9 \xe0 rembourser"},"types":{"amount":"Montant","createdOn":"Cr\xe9\xe9 le","id":"ID","state":"\xc9tat"}},"refundAction":{"confirmButton":{"text":"Ex\xe9cutez"},"refundAmount":{"label":"Montant","placeholder":"Entrez un montant"},"successMessage":"Votre remboursement a \xe9t\xe9 effectu\xe9 avec succ\xe8s.","successTitle":"Succ\xe8s","maxAvailableItemsToRefund":"Nombre maximum d\'articles disponibles pour le remboursement"},"transactionHistory":{"cardTitle":"D\xe9tails","types":{"authorized_amount":"Montant autoris\xe9","currency":"Monnaie","customer":"Client","payment_method":"Mode de paiement","state":"\xc9tat","transaction":"Transaction"},"customerId":"Customer ID","customerName":"Customer Name","creditCardHolder":"Titulaire de la carte de cr\xe9dit","paymentMethod":"Mode de paiement","paymentMethodBrand":"Marque du mode de paiement","PseudoCreditCardNumber":"Pseudo num\xe9ro de carte de cr\xe9dit","CardExpire":"La carte expire"},"voidAction":{"confirm":{"button":{"cancel":"Non","confirm":"Annulez l\'autorisation"},"message":"Voulez-vous vraiment annuler ce paiement?"},"successMessage":"Le paiement a \xe9t\xe9 annul\xe9 avec succ\xe8s.","successTitle":"Succ\xe8s"}}}'),T=JSON.parse('{"postfinancecheckout-order":{"buttons":{"label":{"completion":"Completato","download-invoice":"Scarica fattura","download-packing-slip":"Scarica distinta di imballaggio","refund":"Crea un nuovo rimborso","void":"Annulla autorizzazione","refund-whole-line-item":"Rimborso intera riga","refund-line-item-by-quantity":"Rimborso per quantit\xe0"}},"captureAction":{"button":{"text":"Cattura pagamento"},"currentAmount":"Importo","isFinal":"Questa \xe8 la cattura finale","maxAmount":"Importo massimo","successMessage":"La tua cattura ha avuto successo.","successTitle":"Successo"},"general":{"title":"Ordini"},"header":"Pagamento PostFinanceCheckout","lineItem":{"cardTitle":"Articoli di linea","types":{"amountIncludingTax":"Importo","name":"Nome","quantity":"Quantit\xe0","taxAmount":"Tasse","type":"Tipo","uniqueId":"ID unico"}},"modal":{"title":{"capture":"Cattura","refund":"Nuovo rimborso","void":"Annulla autorizzazione"}},"paymentDetails":{"cardTitle":"Pagamento","error":{"title":"Errore nel recupero dei dettagli del pagamento da PostFinanceCheckout"}},"refund":{"cardTitle":"Rimborsi","refundAmount":{"label":"Importo del rimborso"},"refundQuantity":{"label":"Quantit\xe0 di rimborso"},"types":{"amount":"Importo","createdOn":"Creato il","id":"ID","state":"Stato"}},"refundAction":{"confirmButton":{"text":"Esegui"},"refundAmount":{"label":"Importo","placeholder":"Inserisci un importo"},"successMessage":"Il tuo rimborso \xe8 andato a buon fine.","successTitle":"Successo","maxAvailableItemsToRefund":"Numero massimo di articoli disponibili da rimborsare"},"transactionHistory":{"cardTitle":"Dettagli","types":{"authorized_amount":"Importo autorizzato","currency":"Valuta","customer":"Cliente","payment_method":"Metodo di pagamento","state":"Stato","transaction":"Transazione"},"customerId":"Customer ID","customerName":"Customer Name","creditCardHolder":"Proprietario della carta di credito","paymentMethod":"Metodo di pagamento","paymentMethodBrand":"Metodo di pagamento Marca","PseudoCreditCardNumber":"Numero di carta di credito pseudo","CardExpire":"La carta scade"},"voidAction":{"confirm":{"button":{"cancel":"No","confirm":"Annulla autorizzazione"},"message":"Vuoi davvero annullare questo pagamento?"},"successMessage":"Il pagamento \xe8 stato annullato con successo.","successTitle":"Successo"}}}');let{Module:D}=Shopware;D.register("postfinancecheckout-order",{type:"plugin",name:"PostFinanceCheckout",title:"postfinancecheckout-order.general.title",description:"postfinancecheckout-order.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#2b52ff",snippets:{"de-DE":v,"en-GB":S,"fr-FR":F,"it-IT":T},routeMiddleware(e,t){"sw.order.detail"===t.name&&t.children.push({component:"postfinancecheckout-order-detail",name:"postfinancecheckout.order.detail",isChildren:!0,path:"/sw/order/postfinancecheckout/detail/:id"}),e(t)}}),n(360);let A="PostFinanceCheckoutPayment.config";var O={CONFIG_DOMAIN:A,CONFIG_APPLICATION_KEY:A+".applicationKey",CONFIG_EMAIL_ENABLED:A+".emailEnabled",CONFIG_INTEGRATION:A+".integration",CONFIG_LINE_ITEM_CONSISTENCY_ENABLED:A+".lineItemConsistencyEnabled",CONFIG_SPACE_ID:A+".spaceId",CONFIG_SPACE_VIEW_ID:A+".spaceViewId",CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED:A+".storefrontInvoiceDownloadEnabled",CONFIG_USER_ID:A+".userId",CONFIG_IS_SHOWCASE:A+".isShowcase",CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED:A+".storefrontWebhooksUpdateEnabled",CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED:A+".storefrontPaymentsUpdateEnabled"};let{Component:$,Mixin:P}=Shopware;$.register("postfinancecheckout-settings",{template:'{% block postfinancecheckout_settings %}\n<sw-page class="postfinancecheckout-settings">\n\n	{% block postfinancecheckout_settings_header %}\n	<template #smart-bar-header>\n		<h2>\n			{{ $tc(\'sw-settings.index.title\') }}\n			<sw-icon name="small-arrow-medium-right" small></sw-icon>\n			{{ $tc(\'postfinancecheckout-settings.header\') }}\n		</h2>\n	</template>\n	{% endblock %}\n\n	{% block postfinancecheckout_settings_actions %}\n	<template #smart-bar-actions>\n		{% block postfinancecheckout_settings_actions_save %}\n		<sw-button-process\n				v-model="isSaveSuccessful"\n				class="sw-settings-login-registration__save-action"\n				variant="primary"\n				:isLoading="isLoading"\n				:disabled="isLoading"\n				@click="onSave">\n			{{ $tc(\'postfinancecheckout-settings.settingForm.save\') }}\n		</sw-button-process>\n		{% endblock %}\n	</template>\n	{% endblock %}\n\n	{% block postfinancecheckout_settings_content %}\n	<template #content>\n\n		{% block postfinancecheckout_settings_content_card %}\n		<sw-card-view>\n\n			{% block postfinancecheckout_settings_content_card_channel_config %}\n			<sw-sales-channel-config v-model="config"\n									 ref="configComponent"\n									 :domain="CONFIG_DOMAIN">\n\n				{% block postfinancecheckout_settings_content_card_channel_config_sales_channel %}\n				<template #select="{ onInput, selectedSalesChannelId, salesChannel }">\n\n					{% block postfinancecheckout_settings_content_card_channel_config_sales_channel_card %}\n					<sw-card title="Sales Channel Switch">\n\n						{% block postfinancecheckout_settings_content_card_channel_config_sales_channel_card_title %}\n						<sw-single-select\n								v-model="selectedSalesChannelId"\n								labelProperty="translated.name"\n								valueProperty="id"\n								:options="salesChannel"\n								:disabled="isShowcase"\n								@change="onInput">\n						</sw-single-select>\n						{% endblock %}\n						{% block postfinancecheckout_settings_content_card_channel_config_sales_channel_card_footer %}\n						<template #footer>\n\n							{% block postfinancecheckout_settings_content_card_channel_config_sales_channel_card_footer_container %}\n							<sw-container columns="2fr 1fr" gap="0px 30px">\n\n								{% block postfinancecheckout_settings_content_card_channel_config_sales_channel_card_footer_container_text %}\n								<p>{{ $tc(\'postfinancecheckout-settings.salesChannelCard.button.description\') }}</p>\n								{% endblock %}\n\n								{% block postfinancecheckout_settings_content_card_channel_config_sales_channel_card_footer_container_button %}\n								<sw-button-process\n										v-model="isSetDefaultPaymentSuccessful"\n										:isLoading="isSettingDefaultPaymentMethods"\n										@click="onSetPaymentMethodDefault">\n									{{ $tc(\'postfinancecheckout-settings.salesChannelCard.button.label\') }}\n								</sw-button-process>\n								{% endblock %}\n							</sw-container>\n							{% endblock %}\n						</template>\n						{% endblock %}\n					</sw-card>\n					{% endblock %}\n				</template>\n				{% endblock %}\n\n				{% block postfinancecheckout_settings_content_card_channel_config_cards %}\n				<template #content="{ actualConfigData, allConfigs, selectedSalesChannelId }">\n					<div v-if="actualConfigData">\n\n						<sw-postfinancecheckout-credentials\n								:actualConfigData="actualConfigData"\n								:allConfigs="allConfigs"\n								:selectedSalesChannelId="selectedSalesChannelId"\n								:spaceIdErrorState="spaceIdErrorState"\n								:userIdErrorState="userIdErrorState"\n								:applicationKeyErrorState="applicationKeyErrorState"\n								:spaceIdFilled="spaceIdFilled"\n								:userIdFilled="userIdFilled"\n								:applicationKeyFilled="applicationKeyFilled"\n								:isLoading="isLoading"\n								:isTesting="isTesting"\n								:isShowcase="isShowcase"\n								@check-api-connection-event="onCheckApiConnection"\n						></sw-postfinancecheckout-credentials>\n\n						<sw-postfinancecheckout-options\n								:actualConfigData="actualConfigData"\n								:allConfigs="allConfigs"\n								:isLoading="isLoading"\n								:selectedSalesChannelId="selectedSalesChannelId"\n						>\n						</sw-postfinancecheckout-options>\n\n						<sw-postfinancecheckout-storefront-options\n								:actualConfigData="actualConfigData"\n								:allConfigs="allConfigs"\n								:isLoading="isLoading"\n								:selectedSalesChannelId="selectedSalesChannelId"\n						>\n						</sw-postfinancecheckout-storefront-options>\n\n						<sw-postfinancecheckout-advanced-options\n								:actualConfigData="actualConfigData"\n								:allConfigs="allConfigs"\n								:isLoading="isLoading"\n								:selectedSalesChannelId="selectedSalesChannelId"\n						>\n						</sw-postfinancecheckout-advanced-options>\n\n\n					</div>\n				</template>\n				{% endblock %}\n\n			</sw-sales-channel-config>\n			{% endblock %}\n\n			{% block postfinancecheckout_settings_content_card_loading %}\n			<sw-loader v-if="isLoading"></sw-loader>\n			{% endblock %}\n		</sw-card-view>\n		{% endblock %}\n\n	</template>\n	{% endblock %}\n</sw-page>\n{% endblock %}',inject:["PostFinanceCheckoutConfigurationService"],mixins:[P.getByName("notification")],data(){return{config:{},isLoading:!1,isTesting:!1,isSaveSuccessful:!1,isShowcase:!1,applicationKeyFilled:!1,applicationKeyErrorState:!1,spaceIdFilled:!1,spaceIdErrorState:!1,userIdFilled:!1,userIdErrorState:!1,isSetDefaultPaymentSuccessful:!1,isSettingDefaultPaymentMethods:!1,configIntegrationDefaultValue:"iframe",configEmailEnabledDefaultValue:!0,configLineItemConsistencyEnabledDefaultValue:!0,configStorefrontInvoiceDownloadEnabledEnabledDefaultValue:!0,configStorefrontWebhooksUpdateEnabledDefaultValue:!0,configStorefrontPaymentsUpdateEnabledDefaultValue:!0,...O}},props:{isLoading:{type:Boolean,required:!0}},metaInfo(){return{title:this.$createTitle()}},created(){this.$on("check-api-connection-event",this.onCheckApiConnection)},beforeDestroy(){this.$off("check-api-connection-event",this.onCheckApiConnection)},watch:{config:{handler(){let e=this.$refs.configComponent.allConfigs.null,t=this.$refs.configComponent.selectedSalesChannelId;this.isShowcase=this.config[this.CONFIG_IS_SHOWCASE],null===t?(this.applicationKeyFilled=!!this.config[this.CONFIG_APPLICATION_KEY],this.spaceIdFilled=!!this.config[this.CONFIG_SPACE_ID],this.userIdFilled=!!this.config[this.CONFIG_USER_ID],this.CONFIG_INTEGRATION in this.config||(this.config[this.CONFIG_INTEGRATION]=this.configIntegrationDefaultValue),this.CONFIG_EMAIL_ENABLED in this.config||(this.config[this.CONFIG_EMAIL_ENABLED]=this.configEmailEnabledDefaultValue),this.CONFIG_LINE_ITEM_CONSISTENCY_ENABLED in this.config||(this.config[this.CONFIG_LINE_ITEM_CONSISTENCY_ENABLED]=this.configLineItemConsistencyEnabledDefaultValue),this.CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED in this.config||(this.config[this.CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED]=this.configStorefrontInvoiceDownloadEnabledEnabledDefaultValue),this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED in this.config||(this.config[this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED]=this.configStorefrontWebhooksUpdateEnabledDefaultValue),this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED in this.config||(this.config[this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED]=this.configStorefrontPaymentsUpdateEnabledDefaultValue)):(this.applicationKeyFilled=!!this.config[this.CONFIG_APPLICATION_KEY]||!!e[this.CONFIG_APPLICATION_KEY],this.spaceIdFilled=!!this.config[this.CONFIG_SPACE_ID]||!!e[this.CONFIG_SPACE_ID],this.userIdFilled=!!this.config[this.CONFIG_USER_ID]||!!e[this.CONFIG_USER_ID],this.CONFIG_INTEGRATION in this.config&&this.CONFIG_INTEGRATION in e||(this.config[this.CONFIG_INTEGRATION]=this.configIntegrationDefaultValue),this.CONFIG_EMAIL_ENABLED in this.config&&this.CONFIG_EMAIL_ENABLED in e||(this.config[this.CONFIG_EMAIL_ENABLED]=this.configEmailEnabledDefaultValue),this.CONFIG_LINE_ITEM_CONSISTENCY_ENABLED in this.config&&this.CONFIG_LINE_ITEM_CONSISTENCY_ENABLED in e||(this.config[this.CONFIG_LINE_ITEM_CONSISTENCY_ENABLED]=this.configLineItemConsistencyEnabledDefaultValue),this.CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED in this.config&&this.CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED in e||(this.config[this.CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED]=this.configStorefrontInvoiceDownloadEnabledEnabledDefaultValue),this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED in this.config&&this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED in e||(this.config[this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED]=this.configStorefrontWebhooksUpdateEnabledDefaultValue),this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED in this.config&&this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED in e||(this.config[this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED]=this.configStorefrontPaymentsUpdateEnabledDefaultValue))},deep:!0}},methods:{onSave(){if(!(this.spaceIdFilled&&this.userIdFilled&&this.applicationKeyFilled)){this.setErrorStates();return}this.save()},save(){this.isLoading=!0,this.$refs.configComponent.save().then(e=>{e&&(this.config=e),this.registerWebHooks(),this.synchronizePaymentMethodConfiguration(),this.installOrderDeliveryStates()}).catch(()=>{this.isLoading=!1})},registerWebHooks(){if(!1===this.config[this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED])return!1;this.PostFinanceCheckoutConfigurationService.registerWebHooks(this.$refs.configComponent.selectedSalesChannelId).then(()=>{this.createNotificationSuccess({title:this.$tc("postfinancecheckout-settings.settingForm.titleSuccess"),message:this.$tc("postfinancecheckout-settings.settingForm.messageWebHookUpdated")})}).catch(()=>{this.createNotificationError({title:this.$tc("postfinancecheckout-settings.settingForm.titleError"),message:this.$tc("postfinancecheckout-settings.settingForm.messageWebHookError")}),this.isLoading=!1})},synchronizePaymentMethodConfiguration(){if(!1===this.config[this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED])return!1;this.PostFinanceCheckoutConfigurationService.synchronizePaymentMethodConfiguration(this.$refs.configComponent.selectedSalesChannelId).then(()=>{this.createNotificationSuccess({title:this.$tc("postfinancecheckout-settings.settingForm.titleSuccess"),message:this.$tc("postfinancecheckout-settings.settingForm.messagePaymentMethodConfigurationUpdated")}),this.isLoading=!1}).catch(()=>{this.createNotificationError({title:this.$tc("postfinancecheckout-settings.settingForm.titleError"),message:this.$tc("postfinancecheckout-settings.settingForm.messagePaymentMethodConfigurationError")}),this.isLoading=!1})},installOrderDeliveryStates(){this.PostFinanceCheckoutConfigurationService.installOrderDeliveryStates().then(()=>{this.createNotificationSuccess({title:this.$tc("postfinancecheckout-settings.settingForm.titleSuccess"),message:this.$tc("postfinancecheckout-settings.settingForm.messageOrderDeliveryStateUpdated")}),this.isLoading=!1}).catch(()=>{this.createNotificationError({title:this.$tc("postfinancecheckout-settings.settingForm.titleError"),message:this.$tc("postfinancecheckout-settings.settingForm.messageOrderDeliveryStateError")}),this.isLoading=!1})},onSetPaymentMethodDefault(){this.isSettingDefaultPaymentMethods=!0,this.PostFinanceCheckoutConfigurationService.setPostFinanceCheckoutAsSalesChannelPaymentDefault(this.$refs.configComponent.selectedSalesChannelId).then(()=>{this.isSettingDefaultPaymentMethods=!1,this.isSetDefaultPaymentSuccessful=!0})},setErrorStates(){let e={code:1,detail:this.$tc("postfinancecheckout-settings.messageNotBlank")};this.spaceIdFilled||(this.spaceIdErrorState=e),this.userIdFilled||(this.userIdErrorState=e),this.applicationKeyFilled||(this.applicationKeyErrorState=e)},onCheckApiConnection(e){let{spaceId:t,userId:n,applicationKey:a}=e;this.isTesting=!0,this.PostFinanceCheckoutConfigurationService.checkApiConnection(t,n,a).then(e=>{200===e.result?this.createNotificationSuccess({title:this.$tc("postfinancecheckout-settings.settingForm.credentials.alert.title"),message:this.$tc("postfinancecheckout-settings.settingForm.credentials.alert.successMessage")}):this.createNotificationError({title:this.$tc("postfinancecheckout-settings.settingForm.credentials.alert.title"),message:this.$tc("postfinancecheckout-settings.settingForm.credentials.alert.errorMessage")}),this.isTesting=!1}).catch(()=>{this.createNotificationError({title:this.$tc("postfinancecheckout-settings.settingForm.credentials.alert.title"),message:this.$tc("postfinancecheckout-settings.settingForm.credentials.alert.errorMessage")}),this.isTesting=!1})}}});let{Component:x,Mixin:L}=Shopware;x.register("sw-postfinancecheckout-credentials",{template:'{% block postfinancecheckout_settings_content_card_channel_config_credentials %}\n	<sw-card\n			class="sw-card"\n			 :title="$tc(\'postfinancecheckout-settings.settingForm.credentials.cardTitle\')"\n			v-if="!isShowcase"\n	>\n\n		{% block postfinancecheckout_settings_content_card_channel_config_credentials_card_container %}\n			<sw-container>\n\n				{% block postfinancecheckout_settings_content_card_channel_config_credentials_card_container_settings %}\n					<div v-if="actualConfigData" class="postfinancecheckout-settings-credentials-fields">\n\n						{% block postfinancecheckout_settings_content_card_channel_config_credentials_card_container_settings_space_id %}\n							<sw-inherit-wrapper\n									v-model="actualConfigData[CONFIG_SPACE_ID]"\n									:inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][CONFIG_SPACE_ID]"\n									:customInheritationCheckFunction="checkNumberFieldInheritance">\n								<template #content="props">\n									<sw-number-field\n											:name="CONFIG_SPACE_ID"\n											:required="true"\n											:mapInheritance="props"\n											:label="$tc(\'postfinancecheckout-settings.settingForm.credentials.spaceId.label\')"\n											:helpText="$tc(\'postfinancecheckout-settings.settingForm.credentials.spaceId.tooltipText\')"\n											:disabled="props.isInherited"\n											:value="props.currentValue"\n											:error="spaceIdErrorState"\n											@change="props.updateCurrentValue">\n									</sw-number-field>\n								</template>\n							</sw-inherit-wrapper>\n						{% endblock %}\n\n						{% block postfinancecheckout_settings_content_card_channel_config_credentials_card_container_settings_user_id %}\n							<sw-inherit-wrapper\n									v-model="actualConfigData[CONFIG_USER_ID]"\n									:inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][CONFIG_USER_ID]"\n									:customInheritationCheckFunction="checkNumberFieldInheritance">\n								<template #content="props">\n									<sw-number-field\n											:name="CONFIG_USER_ID"\n											:required="true"\n											:mapInheritance="props"\n											:label="$tc(\'postfinancecheckout-settings.settingForm.credentials.userId.label\')"\n											:helpText="$tc(\'postfinancecheckout-settings.settingForm.credentials.userId.tooltipText\')"\n											:disabled="props.isInherited"\n											:value="props.currentValue"\n											:error="userIdErrorState"\n											@change="props.updateCurrentValue">\n									</sw-number-field>\n								</template>\n							</sw-inherit-wrapper>\n						{% endblock %}\n\n						{% block postfinancecheckout_settings_content_card_channel_config_credentials_card_container_settings_application_key %}\n							<sw-inherit-wrapper\n									v-model="actualConfigData[CONFIG_APPLICATION_KEY]"\n									:inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][CONFIG_APPLICATION_KEY]"\n									:customInheritationCheckFunction="checkTextFieldInheritance">\n								<template #content="props">\n									<sw-password-field\n											:name="CONFIG_APPLICATION_KEY"\n											:required="true"\n											:passwordToggleAble="true"\n											:mapInheritance="props"\n											:label="$tc(\'postfinancecheckout-settings.settingForm.credentials.applicationKey.label\')"\n											:helpText="$tc(\'postfinancecheckout-settings.settingForm.credentials.applicationKey.tooltipText\')"\n											:disabled="props.isInherited"\n											:value="props.currentValue"\n											:error="applicationKeyErrorState"\n											@change="props.updateCurrentValue">\n									</sw-password-field>\n								</template>\n							</sw-inherit-wrapper>\n						{% endblock %}\n					</div>\n				{% endblock %}\n\n				<sw-container columns="1fr 1fr" gap="0px 30px">\n					<sw-button-process\n							:isLoading="isTesting"\n							@click="emitCheckApiConnectionEvent">\n						{{ $tc(\'postfinancecheckout-settings.settingForm.credentials.button.label\') }}\n					</sw-button-process>\n				</sw-container>\n\n			</sw-container>\n		{% endblock %}\n	</sw-card>\n\n{% endblock %}\n',name:"PostFinanceCheckoutCredentials",mixins:[L.getByName("notification")],props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0},spaceIdFilled:{type:Boolean,required:!0},spaceIdErrorState:{required:!0},userIdFilled:{type:Boolean,required:!0},userIdErrorState:{required:!0},applicationKeyFilled:{type:Boolean,required:!0},applicationKeyErrorState:{required:!0},isLoading:{type:Boolean,required:!0},isTesting:{type:Boolean,required:!1},isShowcase:{type:Boolean,required:!0}},data(){return{...O}},computed:{},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0},checkNumberFieldInheritance(e){return"number"!=typeof e||e.length<=0},checkBoolFieldInheritance(e){return"boolean"!=typeof e},emitCheckApiConnectionEvent(){let e={spaceId:this.actualConfigData[O.CONFIG_SPACE_ID],userId:this.actualConfigData[O.CONFIG_USER_ID],applicationKey:this.actualConfigData[O.CONFIG_APPLICATION_KEY]};this.$emit("check-api-connection-event",e)}}});let{Component:B,Mixin:M}=Shopware;B.register("sw-postfinancecheckout-options",{template:'{% block postfinancecheckout_settings_content_card_channel_config_options %}\n	<sw-card class="sw-card"\n			 :title="$tc(\'postfinancecheckout-settings.settingForm.options.cardTitle\')">\n\n		{% block postfinancecheckout_settings_content_card_channel_config_credentials_card_container %}\n			<sw-container>\n\n				{% block postfinancecheckout_settings_content_card_channel_config_credentials_card_container_settings %}\n					<div v-if="actualConfigData" class="postfinancecheckout-settings-options-fields">\n\n						{% block postfinancecheckout_settings_content_card_channel_config_credentials_card_container_settings_space_view_id %}\n							<sw-inherit-wrapper\n									v-model="actualConfigData[CONFIG_SPACE_VIEW_ID]"\n									:inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][CONFIG_SPACE_VIEW_ID]"\n									:customInheritationCheckFunction="checkNumberFieldInheritance">\n								<template #content="props">\n									<sw-number-field\n											:name="CONFIG_SPACE_VIEW_ID"\n											:mapInheritance="props"\n											:label="$tc(\'postfinancecheckout-settings.settingForm.options.spaceViewId.label\')"\n											:helpText="$tc(\'postfinancecheckout-settings.settingForm.options.spaceViewId.tooltipText\')"\n											:disabled="props.isInherited"\n											:value="props.currentValue"\n											@change="props.updateCurrentValue">\n									</sw-number-field>\n								</template>\n							</sw-inherit-wrapper>\n						{% endblock %}\n\n						{% block postfinancecheckout_settings_content_card_channel_config_credentials_card_container_settings_integration %}\n							<sw-inherit-wrapper\n									v-model="actualConfigData[CONFIG_INTEGRATION]"\n									:inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][CONFIG_INTEGRATION]"\n									:customInheritationCheckFunction="checkTextFieldInheritance">\n								<template #content="props">\n									<sw-single-select\n											:name="CONFIG_INTEGRATION"\n											labelProperty="name"\n											valueProperty="id"\n											:options="integrationOptions"\n											:mapInheritance="props"\n											:label="$tc(\'postfinancecheckout-settings.settingForm.options.integration.label\')"\n											:helpText="$tc(\'postfinancecheckout-settings.settingForm.options.integration.tooltipText\')"\n											:disabled="props.isInherited"\n											:value="props.currentValue"\n											@change="props.updateCurrentValue">\n									</sw-single-select>\n								</template>\n							</sw-inherit-wrapper>\n						{% endblock %}\n\n						{% block postfinancecheckout_settings_content_card_channel_config_credentials_card_container_settings_line_item_consistency_enabled %}\n							<sw-inherit-wrapper\n									v-model="actualConfigData[CONFIG_LINE_ITEM_CONSISTENCY_ENABLED]"\n									:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][CONFIG_LINE_ITEM_CONSISTENCY_ENABLED]"\n									:customInheritationCheckFunction="checkBoolFieldInheritance">\n								<template #content="props">\n									<sw-switch-field\n											:name="CONFIG_LINE_ITEM_CONSISTENCY_ENABLED"\n											bordered\n											:mapInheritance="props"\n											:label="$tc(\'postfinancecheckout-settings.settingForm.options.lineItemConsistencyEnabled.label\')"\n											:helpText="$tc(\'postfinancecheckout-settings.settingForm.options.lineItemConsistencyEnabled.tooltipText\')"\n											:disabled="props.isInherited"\n											:value="props.currentValue"\n											@change="props.updateCurrentValue">\n									</sw-switch-field>\n								</template>\n							</sw-inherit-wrapper>\n						{% endblock %}\n\n						{% block postfinancecheckout_settings_content_card_channel_config_credentials_card_container_settings_email_enabled %}\n							<sw-inherit-wrapper\n									v-model="actualConfigData[CONFIG_EMAIL_ENABLED]"\n									:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][CONFIG_EMAIL_ENABLED]"\n									:customInheritationCheckFunction="checkBoolFieldInheritance">\n								<template #content="props">\n									<sw-switch-field\n											:name="CONFIG_EMAIL_ENABLED"\n											bordered\n											:mapInheritance="props"\n											:label="$tc(\'postfinancecheckout-settings.settingForm.options.emailEnabled.label\')"\n											:helpText="$tc(\'postfinancecheckout-settings.settingForm.options.emailEnabled.tooltipText\')"\n											:disabled="props.isInherited"\n											:value="props.currentValue"\n											@change="props.updateCurrentValue">\n									</sw-switch-field>\n								</template>\n							</sw-inherit-wrapper>\n						{% endblock %}\n					</div>\n				{% endblock %}\n			</sw-container>\n		{% endblock %}\n	</sw-card>\n\n{% endblock %}\n',name:"PostFinanceCheckoutOptions",mixins:[M.getByName("notification")],props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0},isLoading:{type:Boolean,required:!0}},data(){return{...O}},computed:{integrationOptions(){return[{id:"iframe",name:this.$tc("postfinancecheckout-settings.settingForm.options.integration.options.iframe")},{id:"payment_page",name:this.$tc("postfinancecheckout-settings.settingForm.options.integration.options.payment_page")}]}},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0},checkNumberFieldInheritance(e){return"number"!=typeof e||e.length<=0},checkBoolFieldInheritance(e){return"boolean"!=typeof e}}});let{Component:R}=Shopware;R.register("sw-postfinancecheckout-settings-icon",{template:'{% block postfinancecheckout_settings_icon %}\n    <span class="sw-icon icon--postfinancecheckout-multicolor sw-icon--multicolor">\n        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="text/ecmascript" width="1000px" zoomAndPan="magnify" contentStyleType="text/css" height="1000px" id="svg2" viewBox="0 0 52.529 52.529" preserveAspectRatio="xMidYMid meet" version="1.0">\n    <defs id="defs6">\n        <clipPath id="clipPath18">\n            <path id="path20" d="M0 0h1486.77v420H0z"/>\n        </clipPath>\n    </defs>\n    <g id="layer2" transform="translate(0 .004)">\n        <path fill="#fcd205" stroke-width=".066" d="M0 52.525h52.529V-.004H0z" id="path22"/>\n        <path fill="#fff" stroke-width=".125" d="M25.456 38.682l1.466-5.891H5.487l-1.468 5.891h21.437" id="path24"/>\n        <path fill="#ed1c24" stroke-width=".11" d="M40.818 21.304s1.755-8.045 1.78-8.12H31.445c0 .05-2.306 10.676-2.306 10.727h2.858c.024 0 1.754-8.02 1.754-8.02h5.413s-1.704 8.044-1.754 8.095h8.245l-1.077 4.962H36.38c0 .05-1.653 7.569-1.653 7.569h-6.19c0 .024-.552 2.706-.576 2.731h9.121c0-.025 1.63-7.594 1.63-7.594h8.196c0-.025 2.155-10.3 2.155-10.35h-8.246" id="path26"/>\n        <path fill="#231f20" stroke-width=".092" d="M21.249 35.443l1.163-5.396h4.486l.54-2.646h-4.465l.686-3.312h4.713l.581-2.646h-7.786l-2.949 14z" id="path1640"/>\n        <path fill="#231f20" stroke-width=".092" d="M10.104 21.303l-2.973 14h3.015l.921-4.272h1.32c4.21 0 6.557-2.061 6.557-5.499 0-2.562-1.823-4.229-4.944-4.229zm2.472 2.564h1.257c1.383 0 2.051.562 2.051 1.875 0 1.687-1.067 2.728-3.035 2.728h-1.257z" id="path1638"/>\n    </g>\n</svg>\n\n    </span>\n{% endblock %}\n'});let{Component:G,Mixin:V}=Shopware;G.register("sw-postfinancecheckout-storefront-options",{template:'<sw-card class="sw-card"\n		 :title="$tc(\'postfinancecheckout-settings.settingForm.storefrontOptions.cardTitle\')">\n	<sw-container>\n		<div v-if="actualConfigData" class="postfinancecheckout-settings-storefront-options-fields">\n			<sw-inherit-wrapper\n					v-model="actualConfigData[CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED]"\n					:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED]"\n					:customInheritationCheckFunction="checkBoolFieldInheritance">\n				<template #content="props">\n					<sw-switch-field\n							:name="CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED"\n							bordered\n							:mapInheritance="props"\n							:label="$tc(\'postfinancecheckout-settings.settingForm.storefrontOptions.invoiceDownloadEnabled.label\')"\n							:helpText="$tc(\'postfinancecheckout-settings.settingForm.storefrontOptions.invoiceDownloadEnabled.tooltipText\')"\n							:disabled="props.isInherited"\n							:value="props.currentValue"\n							@change="props.updateCurrentValue">\n					</sw-switch-field>\n				</template>\n			</sw-inherit-wrapper>\n		</div>\n	</sw-container>\n</sw-card>\n\n',name:"PostFinanceCheckoutStorefrontOptions",mixins:[V.getByName("notification")],props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0},isLoading:{type:Boolean,required:!0}},data(){return{...O}},computed:{},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0},checkNumberFieldInheritance(e){return"number"!=typeof e||e.length<=0},checkBoolFieldInheritance(e){return"boolean"!=typeof e}}});let{Component:q,Mixin:U}=Shopware;q.register("sw-postfinancecheckout-advanced-options",{template:'<sw-card class="sw-card"\n		 :title="$tc(\'postfinancecheckout-settings.settingForm.advancedOptions.cardTitle\')">\n	<sw-container>\n		<div v-if="actualConfigData" class="postfinancecheckout-settings-advanced-options-fields">\n			<sw-inherit-wrapper\n					v-model="actualConfigData[CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED]"\n					:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED]"\n					:customInheritationCheckFunction="checkBoolFieldInheritance">\n				<template #content="props">\n					<sw-switch-field\n							:name="CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED"\n							bordered\n							:mapInheritance="props"\n							:label="$tc(\'postfinancecheckout-settings.settingForm.advancedOptions.webhooksUpdateEnabled.label\')"\n							:helpText="$tc(\'postfinancecheckout-settings.settingForm.advancedOptions.webhooksUpdateEnabled.tooltipText\')"\n							:disabled="props.isInherited"\n							:value="props.currentValue"\n							@change="props.updateCurrentValue">\n					</sw-switch-field>\n				</template>\n			</sw-inherit-wrapper>\n\n			<sw-inherit-wrapper\n					v-model="actualConfigData[CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED]"\n					:inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED]"\n					:customInheritationCheckFunction="checkBoolFieldInheritance">\n				<template #content="props">\n					<sw-switch-field\n							:name="CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED"\n							bordered\n							:mapInheritance="props"\n							:label="$tc(\'postfinancecheckout-settings.settingForm.advancedOptions.paymentsUpdateEnabled.label\')"\n							:helpText="$tc(\'postfinancecheckout-settings.settingForm.advancedOptions.paymentsUpdateEnabled.tooltipText\')"\n							:disabled="props.isInherited"\n							:value="props.currentValue"\n							@change="props.updateCurrentValue">\n					</sw-switch-field>\n				</template>\n			</sw-inherit-wrapper>\n		</div>\n	</sw-container>\n</sw-card>\n\n',name:"PostFinanceCheckoutAdvancedOptions",mixins:[U.getByName("notification")],props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0},isLoading:{type:Boolean,required:!0}},data(){return{...O}},computed:{},methods:{checkTextFieldInheritance(e){return"string"!=typeof e||e.length<=0},checkNumberFieldInheritance(e){return"number"!=typeof e||e.length<=0},checkBoolFieldInheritance(e){return"boolean"!=typeof e}}});let{Module:H}=Shopware;H.register("postfinancecheckout-settings",{type:"plugin",name:"PostFinanceCheckout",title:"postfinancecheckout-settings.general.descriptionTextModule",description:"postfinancecheckout-settings.general.descriptionTextModule",color:"#28d8ff",icon:"default-action-settings",version:"1.0.0",targetVersion:"1.0.0",routes:{index:{component:"postfinancecheckout-settings",path:"index",meta:{parentPath:"sw.settings.index",privilege:"postfinancecheckout.viewer"}}},settingsItem:{group:"plugins",to:"postfinancecheckout.settings.index",iconComponent:"sw-postfinancecheckout-settings-icon",backgroundEnabled:!0,privilege:"postfinancecheckout.viewer"}});let z=Shopware.Classes.ApiService;var K=class extends z{constructor(e,t,n="postfinancecheckout"){super(e,t,n)}registerWebHooks(e=null){let t=this.getBasicHeaders(),n=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/configuration/register-web-hooks`;return this.httpClient.post(n,{salesChannelId:e},{headers:t}).then(e=>z.handleResponse(e))}checkApiConnection(e=null,t=null,n=null){let a=this.getBasicHeaders(),i=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/configuration/check-api-connection`;return this.httpClient.post(i,{spaceId:e,userId:t,applicationId:n},{headers:a}).then(e=>z.handleResponse(e))}setPostFinanceCheckoutAsSalesChannelPaymentDefault(e=null){let t=this.getBasicHeaders(),n=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/configuration/set-postfinancecheckout-as-sales-channel-payment-default`;return this.httpClient.post(n,{salesChannelId:e},{headers:t}).then(e=>z.handleResponse(e))}synchronizePaymentMethodConfiguration(e=null){let t=this.getBasicHeaders(),n=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/configuration/synchronize-payment-method-configuration`;return this.httpClient.post(n,{salesChannelId:e},{headers:t}).then(e=>z.handleResponse(e))}installOrderDeliveryStates(){let e=this.getBasicHeaders(),t=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/configuration/install-order-delivery-states`;return this.httpClient.post(t,{},{headers:e}).then(e=>z.handleResponse(e))}};let W=Shopware.Classes.ApiService;var Y=class extends W{constructor(e,t,n="postfinancecheckout"){super(e,t,n)}createRefund(e,t,n,a){let i=this.getBasicHeaders(),o=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/refund/create-refund/`;return this.httpClient.post(o,{salesChannelId:e,transactionId:t,quantity:n,lineItemId:a},{headers:i}).then(e=>W.handleResponse(e))}createRefundByAmount(e,t,n){let a=this.getBasicHeaders(),i=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/refund/create-refund-by-amount/`;return this.httpClient.post(i,{salesChannelId:e,transactionId:t,refundableAmount:n},{headers:a}).then(e=>W.handleResponse(e))}};let Q=Shopware.Classes.ApiService;var j=class extends Q{constructor(e,t,n="postfinancecheckout"){super(e,t,n)}getTransactionData(e,t){let n=this.getBasicHeaders(),a=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/transaction/get-transaction-data/`;return this.httpClient.post(a,{salesChannelId:e,transactionId:t},{headers:n}).then(e=>Q.handleResponse(e))}getInvoiceDocument(e,t){return`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/transaction/get-invoice-document/${e}/${t}`}getPackingSlip(e,t){return`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/transaction/get-packing-slip/${e}/${t}`}};let Z=Shopware.Classes.ApiService;var J=class extends Z{constructor(e,t,n="postfinancecheckout"){super(e,t,n)}createTransactionCompletion(e,t){let n=this.getBasicHeaders(),a=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/transaction-completion/create-transaction-completion/`;return this.httpClient.post(a,{salesChannelId:e,transactionId:t},{headers:n}).then(e=>Z.handleResponse(e))}};let X=Shopware.Classes.ApiService;var ee=class extends X{constructor(e,t,n="postfinancecheckout"){super(e,t,n)}createTransactionVoid(e,t){let n=this.getBasicHeaders(),a=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/transaction-void/create-transaction-void/`;return this.httpClient.post(a,{salesChannelId:e,transactionId:t},{headers:n}).then(e=>X.handleResponse(e))}};let{Application:et}=Shopware;et.addServiceProvider("PostFinanceCheckoutConfigurationService",e=>new K(et.getContainer("init").httpClient,e.loginService)),et.addServiceProvider("PostFinanceCheckoutRefundService",e=>new Y(et.getContainer("init").httpClient,e.loginService)),et.addServiceProvider("PostFinanceCheckoutTransactionService",e=>new j(et.getContainer("init").httpClient,e.loginService)),et.addServiceProvider("PostFinanceCheckoutTransactionCompletionService",e=>new J(et.getContainer("init").httpClient,e.loginService)),et.addServiceProvider("PostFinanceCheckoutTransactionVoidService",e=>new ee(et.getContainer("init").httpClient,e.loginService))}()})();